package com.pousar.domain.usuario;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import com.pousar.app.util.Strings;
import com.pousar.domain.ValidacaoException;
import com.pousar.jpa.BaseService;
import com.pousar.jpa.EntityManagerUtil;

public class UsuarioService extends BaseService<Usuario> {

	public UsuarioService() {
		super(Usuario.class);
	}

	@Override
	public Usuario salvar(Usuario entidade) {
		String emailUsuario = entidade.getEmail();
			if(emailUsuario.equals(this.buscarPorEmail(emailUsuario))){
				if (Strings.isEmpty(entidade.getNome())){
					throw new ValidacaoException("Nome é obrigatório");
				}
				if (Strings.isEmpty(entidade.getSenha())){
					throw new ValidacaoException("Senha é obrigatório");
				}
			}
			if (this.buscarPorEmail(emailUsuario) != null) {
				throw new ValidacaoException("Email já existe");
			}
			if (Strings.isEmpty(entidade.getNome())){
				throw new ValidacaoException("Nome é obrigatório");
			}
			if (Strings.isEmpty(entidade.getSenha())){
				throw new ValidacaoException("Senha é obrigatório");
			}
			return super.salvar(entidade);
	}

	public Usuario buscarParaLogin(String email, String senha) {
		// TODO: implementar login buscando dados no banco de dados
		try {
			String jpql = "";
			jpql += "SELECT u FROM Usuario u ";
			jpql += "WHERE u.email =:email and u.senha =:senha";

			EntityManager em = EntityManagerUtil.criarEntityManager();

			Query query = em.createQuery(jpql);
			query.setParameter("email", email);
			query.setParameter("senha", senha);

			return (Usuario) query.getSingleResult();

		} catch (NoResultException e) {
			return null;
		}
	}

	public Usuario buscarPorEmail(String email) {
		try {
			String jpql = "";
			jpql += "SELECT u FROM Usuario u ";
			jpql += "WHERE u.email =:email";

			EntityManager em = EntityManagerUtil.criarEntityManager();

			Query query = em.createQuery(jpql);
			query.setParameter("email", email);
			return (Usuario) query.getSingleResult();

		} catch (NoResultException e) {
			return null;
		}
	}

	public List<Usuario> buscarPor(String email, String nome) {
		// TODO: Buscar usuario por email ou nome
		return new ArrayList<>();
	}
}
